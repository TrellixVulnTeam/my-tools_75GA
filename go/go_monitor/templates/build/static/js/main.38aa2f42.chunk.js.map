{"version":3,"sources":["components/charts/reactChart.js","components/domain-card.js","components/actions/api.js","components/fofTable.js","views/fof.view.js","views/status.view.js","views/manualCrawl.view.js","views/facilityAutoComplete.js","App.js","index.js"],"names":["ReactChart","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","today","Date","tempLabels","i","chartData","length","setDate","getDate","unshift","getUTCMonth","state","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","chartData404","chartOptions","responsive","scales","xAxes","time","unit","displayFormats","quarter","distribution","yAxes","ticks","beginAtZero","inherits","createClass","key","value","react_default","a","createElement","className","es","options","Component","cardStyle","border","errStyle","ulStyle","textAlign","listStyleType","margin","padding","DomainCard","apply","arguments","style","statusCode","href","domain","target","statusInfo","FacilityName","ctAllIcons","ctTableFullWidth","ctTableResponsive","ctTableUpgrade","reactChart","GraphDataOutage","GraphData404","stats","hidden","Status","AvgResponse","toFixed","color","Outages","Errors","statusURL","monthlyStatusURL","fofURL","crawlURL","document","location","host","api","crawl","startCrawl","domainToCrawl","userEmail","crawlType","searchTerm","undefined","formData","FormData","set","axios","post","headers","Content-Type","then","resp","catch","console","log","facility","getFacilityList","get","err","fof","get404List","status","getStatusInfo","getMonthlyStatusInfo","FofTable","borderCollapse","component","keys","map","keyName","keyIndex","Page","String","Referer","moment","TimeStamp","format","FofView","fofList","retrieve","setState","selected","filter","includes","fofTable","TabContainer","Typography","children","StatusView","domainObj","monthlyDomainObj","showMonthly","lastUpdate","handleChange","event","_this$state","Tabs","onChange","centered","Tab","Link","to","domain_card","isSelected","statsIcon","id","fof_view","ManualCrawl","crawlDomain","email","cType","replace","alert","indexOf","updateDomain","val","updateUserEmail","updateSearchTerm","handleSelect","_this2","noValidate","autoComplete","FormControl","InputLabel","htmlFor","Select","width","e","inputProps","name","MenuItem","TextField","required","defaultValue","userAgent","Button","variant","onClick","suggestions","FacilityAutoComplete","savedFacilities","localStorage","getItem","inputValue","selectedItem","split","handleKeyDown","keycode","slice","onUpdate","setItem","handleInputChange","item","concat","toConsumableArray","handleDelete","splice","url","push","type","FacilityType","_this$state2","downshift_esm","_ref2","getInputProps","getItemProps","isOpen","inputValue2","selectedItem2","highlightedIndex","InputProps","ref","other","objectWithoutProperties","assign","objectSpread","inputRef","classes","root","renderInput","fullWidth","startAdornment","Chip","tabIndex","onDelete","onKeyDown","placeholder","Paper","square","count","suggestion","keep","toLowerCase","getSuggestions","index","_ref","itemProps","isHighlighted","fontWeight","renderSuggestion","React","App","SelectedFacilities","selectedUpdate","baseUrl","process","window","hash","Route","path","render","manualCrawl_view","facilityAutoComplete","exact","status_view","ReactDOM","HashRouter","src_App","getElementById"],"mappings":"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","file":"static/js/main.38aa2f42.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {Line} from 'react-chartjs-2';\n\nexport class ReactChart extends Component {\n    constructor(props){\n        super(props);\n        let today = new Date();\n\n        let tempLabels = [];\n\n        // Generate date labels starting today and iterating back through length of data\n        for (let i = 0; i < this.props.chartData.length; i++) {\n            // parse date for how many days prior\n            today.setDate(today.getDate()-i);\n            tempLabels.unshift((today.getUTCMonth()+1) +\"/\"+ today.getDate());\n\n            // reset date back to current date\n            today = new Date();\n        }\n\n        this.state = {\n            chartData: {\n                labels: tempLabels,\n                datasets: [\n                    {\n                    label: \"Outages\",\n                    backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                        // 'rgba(54, 162, 235, 0.2)',\n                        // 'rgba(255, 206, 86, 0.2)',\n                        // 'rgba(75, 192, 192, 0.2)',\n                        // 'rgba(153, 102, 255, 0.2)',\n                        // 'rgba(255, 159, 64, 0.2)'\n                    borderColor: 'rgba(255,99,132,1)',\n                        // 'rgba(54, 162, 235, 1)',\n                        // 'rgba(255, 206, 86, 1)',\n                        // 'rgba(75, 192, 192, 1)',\n                        // 'rgba(153, 102, 255, 1)',\n                        // 'rgba(255, 159, 64, 1)'\n                    borderWidth: 2,\n                    hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n                    hoverBorderColor: \"rgba(255,99,132,1)\",\n                    data: this.props.chartData,  // chart data comes from props in domain-card\n                    },\n                    {\n                        label: \"404\",\n                        backgroundColor: 'rgba(255, 103, 0, 0.2)',\n                        borderColor: 'rgba(255, 103, 0, 1)',\n                        borderWidth: 2,\n                        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n                        hoverBorderColor: \"rgba(255,99,132,1)\",\n                        data: this.props.chartData404,  // 404 chart data comes from props in domain-card\n                    },\n                ]\n            },\n            chartOptions: {\n                responsive: true,\n                scales: {\n                    xAxes: [{\n                        time: {\n                            unit: 'day',\n                            displayFormats: {\n                                quarter: 'MMM D'\n                            }\n                        },\n                        distribution: 'series'\n                    }],\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true,\n                        }\n                    }]\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"reactChart\">\n                <Line\n                    data={this.state.chartData}\n                    options={this.state.chartOptions}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ReactChart;","import React, {Component} from \"react\";\nimport ReactChart from './charts/reactChart';\n\nconst cardStyle = {\n    border: '3px solid #00C853'\n};\n\nconst errStyle = {\n    border: '3px solid #D50000'\n};\n\nconst ulStyle = {\n    textAlign: \"left\",\n    listStyleType: \"none\",\n    margin: 0,\n    padding: \"0 0 0 8px\"\n};\n\nexport class DomainCard extends Component {\n    render() {\n        return (\n            <div className=\"domainCard card\" style={this.props.statusCode > 399 ? errStyle : cardStyle}>\n                <div className=\"header\">\n                    <h4 className=\"title\">\n                        <a href={\"http://\" + this.props.domain} target={\"_blank\"}>\n                            {this.props.statusInfo.FacilityName !== \"\" ?\n                                this.props.statusInfo.FacilityName : this.props.domain}\n                        </a>\n                    </h4>\n                </div>\n                <div className={\n                    \"content\" +\n                    (this.props.ctAllIcons ? \" all-icons\" : \"\") +\n                    (this.props.ctTableFullWidth ? \" table-full-width\" : \"\") +\n                    (this.props.ctTableResponsive ? \" table-responsive\" : \"\") +\n                    (this.props.ctTableUpgrade ? \" table-upgrade\" : \"\")\n                }\n                >\n\n                    <ReactChart chartData={this.props.statusInfo.GraphDataOutage} chartData404={this.props.statusInfo.GraphData404}/>\n\n                    <div className=\"footer\">\n                        {this.props.stats != null ? <hr/> : \"\"}\n                        <div className=\"stats\">\n                            <ul style={ulStyle}>\n                                <li hidden={this.props.statusCode === 200}>\n                                    <b>Status:</b> {this.props.statusInfo.Status}\n                                </li>\n                                <li>\n                                    <b>Response Time:</b> {this.props.statusInfo.AvgResponse.toFixed(2)}<i>ms</i>\n                                </li>\n                                <li>\n                                    <b>\n                                        <span style={{color: \"#e83e8c\"}}>Outages: </span>\n                                    </b>\n                                    {this.props.statusInfo.Outages}\n                                </li>\n                                <li>\n                                    <b>\n                                        <span style={{color: \"#ff6700\"}}>404: </span>\n                                    </b>\n                                    {this.props.statusInfo.Errors}\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DomainCard;","import axios from \"axios\";  // request library\n\n// url for monitor status info endpoint\nlet statusURL = \"http://monitoring-env.qj3cticwqw.us-east-1.elasticbeanstalk.com/api/monitorstatus\";\n// let statusURL = \"http://localhost:5555/api/monitorstatus\";\nlet monthlyStatusURL = \"http://monitoring-env.qj3cticwqw.us-east-1.elasticbeanstalk.com/api/monthlymonitorstatus\";\nlet fofURL = \"http://monitoring-env.qj3cticwqw.us-east-1.elasticbeanstalk.com/api/404list\";\nlet facilityListURL = \"http://monitoring-env.qj3cticwqw.us-east-1.elasticbeanstalk.com/api/getFacilities\";\nlet crawlURL = \"http://monitoring-env.qj3cticwqw.us-east-1.elasticbeanstalk.com/api/runCrawl\";\n// let crawlURL = \"http://localhost:5555/api/runCrawl\";\n\n// Check if we need to convert to relative url because basic auth\nif (document.location.host === \"monitor.acadiadevelopment.com\") {\n    statusURL = \"http://\" + document.location.host + \"/api/monitorstatus\";\n    monthlyStatusURL = \"http://\" + document.location.host + \"/api/monthlymonitorstatus\";\n    fofURL = \"http://\" + document.location.host + \"/api/404list\";\n    crawlURL = \"http://\" + document.location.host + \"/api/runCrawl\";\n}\n\n\nexport default {\n    crawl: {\n        startCrawl: (domainToCrawl, userEmail, crawlType, searchTerm='') => {\n            // Set form data variable\n            let formData = new FormData();\n            formData.set('domain', domainToCrawl);\n            formData.set('email', userEmail);\n            formData.set('crawlType', crawlType);\n            formData.set('searchTerm', searchTerm);\n\n            return axios.post(crawlURL, formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                },\n            })\n                .then((resp) => {\n                    return resp.data;\n                })\n                .catch((resp) => {\n                    //handle error\n                    console.log(resp);\n                });\n        }\n    },\n    facility: {\n        getFacilityList: () => {\n            return axios.get(facilityListURL).then((resp) => {\n                return resp.data;\n            })\n                .catch(function (err) {\n                    console.log(\"GET Facility List ERR: \", err);\n                })\n        }\n    },\n    fof: {\n        get404List: () => {\n            return axios.get(fofURL).then((resp) => {\n                return resp.data;\n            })\n                .catch(function (err) {\n                    console.log(\"GET 404 ERR: \", err);\n                })\n        }\n    },\n    status: {\n        getStatusInfo: () => {\n            return axios.get(statusURL).then((resp) => {\n                return resp.data;\n            })\n                .catch(function (err) {\n                    console.log(\"GET Status ERR: \", err);\n                })\n        },\n        getMonthlyStatusInfo: () => {\n            return axios.get(monthlyStatusURL).then((resp) => {\n                return resp.data;\n            })\n                .catch(function (err) {\n                    console.log(\"GET MonthlyStatus ERR: \", err);\n                })\n        }\n    },\n}\n","import React from 'react';\nimport moment from 'moment';\n\n\nfunction FofTable(props) {\n    return (\n        <div className=\"fof\">\n            <h4>\n                {props.facility}\n            </h4>\n            <table className=\"fofTable\" style={{borderCollapse: 'collapse'}}>\n                <thead>\n                <tr>\n                    <th component=\"th\"></th>\n                    <td>404 Link</td>\n                    <td>Referred From / Found On</td>\n                    <td>Time</td>\n                </tr>\n                </thead>\n                <tbody>\n                {Object.keys(props.data).map((keyName, keyIndex) => {\n                    return (\n                        <tr key={keyName}>\n                            <th>{keyName}</th>\n                            <td>\n                                <a href={props.data[keyIndex].Page.String} target={\"_blank\"}>\n                                    {props.data[keyIndex].Page.String}\n                                </a>\n                            </td>\n                            <td>\n                                <a href={props.data[keyIndex].Referer.String} target={\"_blank\"}>\n                                    {props.data[keyIndex].Referer.String}\n                                </a>\n                            </td>\n                            <td>{moment(props.data[keyIndex].TimeStamp).format(\"lll\")}</td>\n                        </tr>\n                    );\n                })}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default FofTable;\n","import React, {Component} from 'react';\nimport FofTable from '../components/fofTable';\nimport api from '../components/actions/api';\n\n\nclass FofView extends Component {\n    state = {\n        fofList: {},\n    };\n\n    componentWillMount() {\n        // Initiate request on startup\n        this.retrieve();\n    }\n\n    retrieve = () => {\n        // Request for 404's\n        api.fof.get404List().then(resp => {\n            this.setState({\n                fofList: resp\n            });\n        });\n    };\n\n    render() {\n        let selected = this.props.selected;\n        let fof = this.state.fofList;\n        console.log('Selected: ', selected);\n        console.log(fof);\n\n        if (this.props.selected.length > 0) {\n            return (\n                <div className=\"content\">\n                    <h3>404's</h3>\n                    {(Object.keys(fof).filter(domain => selected.includes(fof[domain][0].FacilityName.String))\n                        .map((keyName, keyIndex) => (\n                        // Use keyName to get current key's name, domainObj[keyName] to get value\n                        <FofTable\n                            facility={fof[keyName][0].FacilityName.String}\n                            domain={keyName}\n                            key={keyIndex}\n                            data={fof[keyName]}\n                        />)\n                    ))\n                    }\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"content\">\n                    <h3>404's</h3>\n                    {fof ? (Object.keys(fof).map((keyName, keyIndex) => {\n                        // Use keyName to get current key's name, domainObj[keyName] to get value\n                        return (<FofTable\n                            facility={fof[keyName][0].FacilityName.String}\n                            domain={keyName}\n                            key={keyIndex}\n                            data={fof[keyName]}\n                        />);\n                    })) : <p>Could Not Get Data</p>\n                    }\n                </div>\n            );\n        }\n    }\n}\n\nexport default FofView;","import React, {Component} from 'react';\nimport DomainCard from '../components/domain-card';\nimport api from '../components/actions/api';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport FofView from \"./fof.view\";\n\nfunction TabContainer(props) {\n    return (\n        <Typography component=\"div\" style={{padding: 8 * 3}}>\n            {props.children}\n        </Typography>\n    );\n}\n\nTabContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nclass StatusView extends Component {\n    state = {\n        domainObj: {},\n        monthlyDomainObj: {},\n        showMonthly: false,\n        lastUpdate: \" \",\n        value: 0\n    };\n\n    componentWillMount() {\n        // get status data obj on startup\n        this.retrieve();\n    }\n\n\n    // Get status data from monitor endpoint\n    retrieve = () => {\n        // Get weekly status\n        api.status.getStatusInfo().then(resp => {\n            // console.log(resp);\n            this.setState({\n                domainObj: resp,\n            });\n        });\n\n        // Get monthly status\n        api.status.getMonthlyStatusInfo().then(resp => {\n            this.setState({\n                monthlyDomainObj: resp\n            });\n        });\n    };\n\n    // Updates tabs\n    handleChange = (event, value) => {\n        this.setState({value});\n    };\n\n    render() {\n        const selected = this.props.selected;\n        const {value, domainObj, monthlyDomainObj} = this.state;\n        console.log(domainObj);\n\n        if (selected.length > 0) {\n            return (\n                <div className=\"content\">\n                    <h3>Site Status</h3>\n                    <Tabs value={value} onChange={this.handleChange} centered>\n                        <Tab label=\"Weekly\"/>\n                        <Tab label=\"Monthly\"/>\n                        <Tab label=\"404 List\"/>\n                        <Link to=\"/manual_crawl\">\n                            <Tab label=\"Start Crawl\"/>\n                        </Link>\n                    </Tabs>\n                    {value === 0 && <TabContainer>\n                        {domainObj ? (Object.keys(domainObj).map((keyName, keyIndex) => {\n                            // check if facility name is in the selected list before it gets rendered\n                            if (selected.includes(domainObj[keyName].FacilityName)) {\n                                // Use keyName to get current key's name, domainObj[keyName] to get value\n                                return (<DomainCard\n                                    isSelected={true}\n                                    statsIcon=\"fa fa-history\"\n                                    key={keyIndex}\n                                    statusCode={domainObj[keyName].Status}\n                                    statusInfo={domainObj[keyName]}\n                                    id={keyName}\n                                    domain={keyName}\n                                />);\n                            }\n                        })) : (<p> Could Not Get Data </p>)\n                        }\n                    </TabContainer>}\n                    {value === 1 && <TabContainer>\n                        {monthlyDomainObj ? (Object.keys(monthlyDomainObj).map((keyName, keyIndex) => {\n                            // check if facility name is in the selected list before it gets rendered\n                            if (selected.includes(monthlyDomainObj[keyName].FacilityName)) {\n                                // Use keyName to get current key's name, domainObj[keyName] to get value\n                                return (<DomainCard\n                                    isSelected={true}\n                                    statsIcon=\"fa fa-history\"\n                                    key={keyIndex}\n                                    statusCode={monthlyDomainObj[keyName].Status}\n                                    statusInfo={monthlyDomainObj[keyName]}\n                                    id={keyName}\n                                    domain={keyName}\n                                />);\n                            }\n                        })) : (<p> Could Not Get Data </p>)\n                        }\n                    </TabContainer>}\n                    {value === 2 && <TabContainer>\n                        <FofView selected={selected}/>\n                    </TabContainer>}\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"content\">\n                    <h3>Site Status</h3>\n                    <Tabs value={value} onChange={this.handleChange} centered>\n                        <Tab label=\"Weekly\"/>\n                        <Tab label=\"Monthly\"/>\n                        <Tab label=\"404 List\"/>\n                        <Link to=\"/manual_crawl\">\n                            <Tab label=\"Start Crawl\"/>\n                        </Link>\n                    </Tabs>\n                    {value === 0 && <TabContainer>\n                        {/* Check whether we have data to show, then create a card for each domain */}\n                        {domainObj ? (Object.keys(domainObj).map((keyName, keyIndex) => {\n                            // Use keyName to get current key's name, domainObj[keyName] to get value\n                            return (<DomainCard\n                                isSelected={true}\n                                statsIcon=\"fa fa-history\"\n                                key={keyIndex}\n                                statusCode={domainObj[keyName].Status}\n                                statusInfo={domainObj[keyName]}\n                                id={keyName}\n                                domain={keyName}\n                            />);\n                        })) : <p>Could Not Get Data</p>\n                        }\n                    </TabContainer>}\n                    {value === 1 && <TabContainer>\n                        {/* Check whether we have data to show, then create a card for each domain */}\n                        {monthlyDomainObj ? (Object.keys(monthlyDomainObj).map((keyName, keyIndex) => {\n                            // Use keyName to get current key's name, domainObj[keyName] to get value\n                            return (<DomainCard\n                                isSelected={true}\n                                statsIcon=\"fa fa-history\"\n                                key={keyIndex}\n                                statusCode={monthlyDomainObj[keyName].Status}\n                                statusInfo={monthlyDomainObj[keyName]}\n                                id={keyName}\n                                domain={keyName}\n                            />);\n                        })) : <p>Could Not Get Data</p>\n                        }\n                    </TabContainer>}\n                    {value === 2 && <TabContainer>\n                        <FofView selected={selected}/>\n                    </TabContainer>}\n                </div>\n            );\n        }\n    }\n}\n\nexport default StatusView;","import React, {Component} from 'react';\nimport api from '../components/actions/api';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport './manualCrawl.css';\n\n\nclass ManualCrawl extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            crawlDomain: '',\n            userEmail: '',\n            crawlType: '404',\n            searchTerm: '',\n        };\n    }\n\n    startCrawl = () => {\n        // Get values from state\n        let domain = this.state.crawlDomain;\n        let email = this.state.userEmail;\n        let cType = this.state.crawlType;\n        let searchTerm = this.state.searchTerm;\n\n        domain.replace('https://', '');\n        domain.replace('http://', '');\n        console.log(domain);\n\n        // Check for empty values & acadia email\n        if (domain.length < 2 || email.length < 2) {\n            return alert('Domain/Email Invalid');\n        } else if (email.indexOf(\"@acadiahealthcare.com\") < 0) {\n            return alert('Requires Acadia Email');\n        }\n\n        // Start request for crawl\n        api.crawl.startCrawl(domain, email, cType, searchTerm).then(resp => {\n            alert(resp);\n        });\n    };\n\n    // Set state for domain\n    updateDomain = (val) => {\n        // Remove protocols and trailing slash\n        val = val.replace('https://', '');\n        val = val.replace('http://', '');\n        val = val.replace(/\\/$/, \"\");\n\n        this.setState({\n            crawlDomain: val\n        });\n    };\n\n    // Set state for user email\n    updateUserEmail = (val) => {\n        this.setState({\n            userEmail: val\n        });\n    };\n\n    // Set state for user email\n    updateSearchTerm = (val) => {\n        this.setState({\n            searchTerm: val\n        });\n    };\n\n    // update crawl type selection\n    handleSelect = val => {\n        this.setState({\n            crawlType: val\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"content\">\n                <h3>Crawl Domain</h3>\n\n                <form className=\"\" noValidate autoComplete=\"off\">\n                    <p>\n                        Trigger a crawl and receive report in your email.\n                        <br/>\n                        Crawl times vary by domain.\n                    </p>\n                    <FormControl className=\"\">\n                        <InputLabel htmlFor=\"filterCrawlType\">Crawl Type</InputLabel>\n                        <Select\n                            style={{width: '120px', color: '#ff9800'}}\n                            value={this.state.crawlType}\n                            onChange={(e) => this.handleSelect(e.target.value)}\n                            inputProps={{\n                                name: 'crawlType',\n                                id: 'filterCrawlType',\n                            }}\n                        >\n                            <MenuItem value={'404'}>404</MenuItem>\n                            <MenuItem value={'sitemap'}>Sitemap</MenuItem>\n                            <MenuItem value={'search'}>Search</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <br/>\n                    {this.state.crawlType === \"search\" &&\n                    <span>\n                        <TextField\n                            required\n                            id=\"standard-required\"\n                            label=\"Search Term\"\n                            defaultValue={this.state.searchTerm}\n                            onChange={(e) => this.updateSearchTerm(e.target.value)}\n                            className=\"textField\"\n                            margin=\"normal\"\n                        />\n                        <br/>\n                    </span>\n\n                    }\n                    <TextField\n                        required\n                        id=\"standard-required\"\n                        label=\"Domain\"\n                        defaultValue={this.state.crawlDomain}\n                        onChange={(e) => this.updateDomain(e.target.value)}\n                        className=\"textField\"\n                        margin=\"normal\"\n                    />\n                    <br/>\n                    <TextField\n                        required\n                        id=\"standard-required\"\n                        label=\"Email\"\n                        defaultValue={this.state.userAgent}\n                        onChange={(e) => this.updateUserEmail(e.target.value)}\n                        className=\"textField\"\n                        margin=\"normal\"\n                    />\n                    <br/>\n                    <Button variant=\"contained\" color=\"primary\" className=\"\" onClick={this.startCrawl}>\n                        Start Crawl\n                    </Button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default ManualCrawl;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport keycode from 'keycode';\nimport Downshift from 'downshift';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\nimport api from \"../components/actions/api\";\n\n\nlet suggestions = [];\n\nfunction renderInput(inputProps) {\n    const {InputProps, ref, ...other} = inputProps;\n\n    return (\n        <TextField\n            InputProps={{\n                inputRef: ref,\n                classes: {\n                    root: 'autoComplete-inputRoot',\n                },\n                ...InputProps,\n            }}\n            {...other}\n        />\n    );\n}\n\n// Get list of facility/domain pairs\nfunction retrieveList() {\n    // Get weekly status\n    api.facility.getFacilityList().then(resp => {\n        suggestions = [\n            {\n                label: \"All CTC\",\n                url: \"ctc\"\n            },\n            {\n                label: \"All Inpatient\",\n                url: \"inpatient\"\n            },\n            {\n                label: \"All Residential Dual\",\n                url: \"residentialDual\"\n            },\n            {\n                label: \"All Residential SA\",\n                url: \"residentialSA\"\n            },\n            {\n                label: \"All Specialty\",\n                url: \"specialty\"\n            }\n        ];\n        for (let key in resp) {\n            suggestions.push(\n                {\n                    label: resp[key].FacilityName,\n                    url: key,\n                    type: resp[key].FacilityType\n                }\n            )\n        }\n    });\n}\n\nfunction renderSuggestion({suggestion, index, itemProps, highlightedIndex, selectedItem}) {\n    const isHighlighted = highlightedIndex === index;\n    const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\n\n    return (\n        <MenuItem\n            {...itemProps}\n            key={suggestion.label}\n            selected={isHighlighted}\n            component=\"div\"\n            style={{\n                fontWeight: isSelected ? 500 : 400,\n            }}\n        >\n            {suggestion.label}\n        </MenuItem>\n    );\n}\n\nrenderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.number,\n    index: PropTypes.number,\n    itemProps: PropTypes.object,\n    selectedItem: PropTypes.string,\n    suggestion: PropTypes.shape({label: PropTypes.string}).isRequired,\n};\n\nfunction getSuggestions(inputValue) {\n    let count = 0;\n\n    return suggestions.filter(suggestion => {\n        const keep =\n            (!inputValue || suggestion.label.toLowerCase().indexOf(inputValue.toLowerCase()) !== -1) &&\n            count < 10;  // max suggestions to show\n\n        if (keep) {\n            count += 1;\n        }\n\n        return keep;\n    });\n}\n\n\nclass FacilityAutoComplete extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        if (suggestions.length < 1) {\n            retrieveList();\n        }\n    }\n\n    // Check local storage for saved facilities\n    savedFacilities = localStorage.getItem(\"selectedFacilities\") != null ?\n        localStorage.getItem(\"selectedFacilities\") : [];\n\n    state = {\n        inputValue: '',\n        selectedItem: this.savedFacilities.length > 0 ? this.savedFacilities.split(',') : [],\n    };\n\n    handleKeyDown = event => {\n        let {inputValue, selectedItem} = this.state;\n        if (selectedItem.length && !inputValue.length && keycode(event) === 'backspace') {\n            selectedItem = selectedItem.slice(0, selectedItem.length - 1);\n            this.setState({\n                selectedItem\n            });\n\n            // Pass updated selected facilities back to parent component\n            this.props.onUpdate(selectedItem);\n            localStorage.setItem(\"selectedFacilities\", selectedItem);\n        }\n    };\n\n    handleInputChange = event => {\n        this.setState({inputValue: event.target.value});\n    };\n\n    handleChange = item => {\n        let {selectedItem} = this.state;\n\n        if (selectedItem.indexOf(item) === -1) {\n            selectedItem = [...selectedItem, item];\n        }\n\n        this.setState({\n            inputValue: '',\n            selectedItem,\n        });\n\n        // Pass updated selected facilities back to parent component\n        this.props.onUpdate(selectedItem);\n        localStorage.setItem(\"selectedFacilities\", selectedItem);\n    };\n\n    handleDelete = item => () => {\n        const selectedItem = [...this.state.selectedItem];\n        selectedItem.splice(selectedItem.indexOf(item), 1);\n\n        this.setState({selectedItem});\n\n        // Pass updated selected facilities back to parent component\n        this.props.onUpdate(selectedItem);\n        localStorage.setItem(\"selectedFacilities\", selectedItem);\n    };\n\n    render() {\n        const {inputValue, selectedItem} = this.state;\n\n        return (\n            <Downshift inputValue={inputValue} onChange={this.handleChange} selectedItem={selectedItem}>\n                {({\n                      getInputProps,\n                      getItemProps,\n                      isOpen,\n                      inputValue: inputValue2,\n                      selectedItem: selectedItem2,\n                      highlightedIndex,\n                  }) => (\n                    <div className='autoComplete-container'>\n                        {renderInput({\n                            fullWidth: true,\n                            InputProps: getInputProps({\n                                startAdornment: selectedItem.map(item => (\n                                    <Chip\n                                        key={item}\n                                        tabIndex={-1}\n                                        label={item}\n                                        className='autoComplete-chip'\n                                        onDelete={this.handleDelete(item)}\n                                    />\n                                )),\n                                onChange: this.handleInputChange,\n                                onKeyDown: this.handleKeyDown,\n                                placeholder: 'Search facility',\n                                id: 'integration-downshift-multiple',\n                            }),\n                        })}\n                        {isOpen ? (\n                            <Paper className='autoComplete-paper' square>\n                                {getSuggestions(inputValue2).map((suggestion, index) =>\n                                    renderSuggestion({\n                                        suggestion,\n                                        index,\n                                        itemProps: getItemProps({item: suggestion.label}),\n                                        highlightedIndex,\n                                        selectedItem: selectedItem2,\n                                    }),\n                                )}\n                            </Paper>\n                        ) : null}\n                    </div>\n                )}\n            </Downshift>\n        );\n    }\n}\n\nexport default FacilityAutoComplete;\n\n\n","import React, {Component} from 'react';\nimport {Route, Link} from 'react-router-dom';\nimport StatusView from './views/status.view';\nimport ManualCrawl from './views/manualCrawl.view';\nimport FacilityAutoComplete from './views/facilityAutoComplete';\nimport './assets/css/material-dashboard.css';\nimport './index.css';\n\n\n\nclass App extends Component {\n\n    state = {\n        SelectedFacilities: localStorage.getItem(\"selectedFacilities\") != null ?\n            localStorage.getItem(\"selectedFacilities\") : [],\n    };\n\n    // Updates the selected facility list\n    selectedUpdate = (val) => {\n        this.setState({\n            SelectedFacilities: val\n        });\n        console.log(val);\n    };\n\n    baseUrl = process.env.PUBLIC_URL;\n\n    render() {\n        // remove unnecessary search bar from manual crawl page\n        if (window.location.hash === \"#/manual_crawl\") {\n            return (\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <div className=\"App-title\">\n                            <Link to=\"/\">\n                                Acadia Monitoring\n                            </Link>\n                        </div>\n                    </header>\n                    <Route path='/manual_crawl' render={() => <ManualCrawl/>}/>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <div className=\"App-title\">\n                            <Link to=\"/\">\n                                Acadia Monitoring\n                            </Link>\n                        </div>\n                    </header>\n                    <FacilityAutoComplete onUpdate={this.selectedUpdate}/>\n\n                    <Route exact path='/' render={() => <StatusView selected={this.state.SelectedFacilities}/>}/>\n\n                    {(window.location.hash !== \"#/\") ? (\n                        <div style={{padding: \"30px\"}}>\n                            You're off the path...\n                            <Link to=\"/\">\n                                Go Back Home\n                            </Link>\n                        </div>\n                    ) : <span></span>\n                    }\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>,\n    document.getElementById('root'));"],"sourceRoot":""}